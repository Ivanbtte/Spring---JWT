{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TrimestreService = /*#__PURE__*/(() => {\n  class TrimestreService {\n    constructor(http) {\n      this.http = http;\n    } // Método para obtener un trimestre por su ID\n\n\n    getTrimestre(id) {\n      return this.http.get(environment.urlApi + 'trimestre/' + id).pipe(catchError(this.handleError));\n    } // Método para actualizar un trimestre\n\n\n    updateTrimestre(id, trimestre) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      }); // Asegurarte de que las fechas están en formato YYYY-MM-DD antes de enviarlas\n\n      const formattedTrimestre = { ...trimestre,\n        fecha_inicio: this.formatDateForInput(trimestre.fecha_inicio),\n        fecha_fin: this.formatDateForInput(trimestre.fecha_fin)\n      };\n      return this.http.put(environment.urlApi + 'trimestre/' + id, formattedTrimestre, {\n        headers\n      }).pipe(catchError(this.handleError));\n    } // Método para formatear las fechas\n\n\n    formatDateForInput(dateString) {\n      const date = new Date(dateString);\n      return date.toISOString().split('T')[0]; // Devuelve en formato YYYY-MM-DD\n    } // Método para manejar errores\n\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // Error del lado del cliente\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // Error del lado del servidor\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      } // Devolver un observable con un mensaje de error\n\n\n      return throwError('Something went wrong; please try again later.');\n    }\n\n  }\n\n  TrimestreService.ɵfac = function TrimestreService_Factory(t) {\n    return new (t || TrimestreService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  TrimestreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TrimestreService,\n    factory: TrimestreService.ɵfac,\n    providedIn: 'root'\n  });\n  return TrimestreService;\n})();","map":null,"metadata":{},"sourceType":"module"}