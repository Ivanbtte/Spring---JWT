{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let InstitutoService = /*#__PURE__*/(() => {\n  class InstitutoService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getList() {\n      return this.http.get(environment.urlApi + 'instituto').pipe(catchError(this.handleError));\n    } // Método para obtener un instituto por ID (GET)\n\n\n    getInstituto(id) {\n      return this.http.get(environment.urlApi + 'instituto/' + id).pipe(catchError(this.handleError));\n    } // Método para actualizar un instituto por ID (PUT)\n\n\n    updateInstituto(id, instituto) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      return this.http.put(environment.urlApi + 'instituto/' + id, instituto, {\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n\n    handleError(error) {\n      if (error.status == 0) {\n        console.error('Se ha producido un error', error.status, error.error);\n      } else {\n        console.error('Backend retornó el código de estado', error.status, error.error);\n      }\n\n      return throwError(() => new Error('Algo falló. Por favor intente nuevamente.'));\n    }\n\n  }\n\n  InstitutoService.ɵfac = function InstitutoService_Factory(t) {\n    return new (t || InstitutoService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  InstitutoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InstitutoService,\n    factory: InstitutoService.ɵfac,\n    providedIn: 'root'\n  });\n  return InstitutoService;\n})();","map":null,"metadata":{},"sourceType":"module"}