{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, map, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ArticuloService = /*#__PURE__*/(() => {\n  class ArticuloService {\n    constructor(http) {\n      this.http = http;\n    } // Nuevo método para obtener institutos\n\n\n    getInstitutos() {\n      return this.http.get(environment.urlApi + 'instituto').pipe(catchError(this.handleError));\n    } // Método para obtener trimestres\n\n\n    getTrimestresFilter() {\n      return this.http.get(environment.urlApi + 'trimestre').pipe(map(trimestres => {\n        // Ordena los trimestres por fecha de inicio descendente\n        trimestres.sort((a, b) => new Date(b.fecha_inicio).getTime() - new Date(a.fecha_inicio).getTime()); // Filtra para obtener solo los dos últimos trimestres\n\n        return trimestres.slice(0, 2);\n      }));\n    } // Método para obtener trimestres\n\n\n    getTrimestres() {\n      return this.http.get(environment.urlApi + 'trimestre').pipe(catchError(this.handleError));\n    }\n\n    getList() {\n      return this.http.get(environment.urlApi + 'articulo').pipe(catchError(this.handleError));\n    }\n\n    getAutoresPorInstituto(institutoId) {\n      return this.http.get(environment.urlApi + 'investigador/instituto/' + institutoId);\n    }\n\n    searchPublications(criteria) {\n      return this.http.post(environment.urlApi + 'articulos/filtro', criteria);\n    }\n\n    dowloadzip(criteria) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      console.log(criteria);\n      return this.http.post(environment.urlApi + 'files/download-zip', criteria, {\n        headers: headers,\n        responseType: 'blob' // Indicamos que la respuesta es un blob\n\n      });\n    } // Nuevo método para agregar un autor no UNSIS\n\n\n    agregarAutorNoUnsis(nuevoAutor) {\n      return this.http.post(environment.urlApi + 'autor', nuevoAutor).pipe(catchError(this.handleError));\n    }\n\n    eliminarAutorNoUnsis(autorId) {\n      return this.http.delete(environment.urlApi + 'autor/' + autorId).pipe(catchError(this.handleError));\n    } // Nuevo método para crear un artículo\n\n\n    crearArticulo(articulo) {\n      return this.http.post(environment.urlApi + 'articulo', articulo).pipe(catchError(this.handleError));\n    }\n\n    agregarObservaciones(observaciones, id) {\n      return this.http.put(environment.urlApi + 'articulo/observaciones/' + observaciones.id_articulo, observaciones).pipe(catchError(this.handleError));\n    }\n\n    agregarAutorArticulo(articuloId, autorId, rolAutor) {\n      return this.http.post(environment.urlApi + 'articulo/' + articuloId + '/autores/' + autorId, rolAutor).pipe(catchError(this.handleError));\n    }\n\n    getArticuloById(id) {\n      return this.http.get(environment.urlApi + 'articulo/' + id);\n    }\n\n    handleError(error) {\n      if (error.status === 0) {\n        // Error del lado del cliente o de la red\n        console.error('Se ha producido un error: ', error.status, error.error);\n        Swal.fire({\n          icon: 'error',\n          title: 'Error de red',\n          text: 'No se pudo conectar al servidor. Por favor verifique su conexión.'\n        });\n      } else {\n        // El backend devolvió un código de error\n        console.error('Backend retornó el código de estado: ', error.status, error.error);\n        Swal.fire({\n          icon: 'error',\n          title: 'Error en el servidor',\n          text: `${error.error.message || 'Ocurrió un problema, inténtelo de nuevo.'}`\n        });\n      } // Retornar el error para que otros servicios puedan manejarlo si es necesario\n\n\n      return throwError(() => new Error('Algo falló. Por favor intente nuevamente.'));\n    }\n\n    actualizarArticulo(id, articuloDto) {\n      return this.http.put(environment.urlApi + 'articulo/' + id, articuloDto).pipe(catchError(this.handleError));\n    }\n\n    reporte() {\n      const headers = new HttpHeaders({\n        'Accept': 'application/pdf'\n      });\n      return this.http.get(environment.urlApi + \"/exportarPDF\", {\n        headers,\n        responseType: 'blob'\n      });\n    }\n\n    reporteExe(criterios) {\n      const headers = new HttpHeaders({\n        'Accept': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'Content-Type': 'application/json' // Aseguramos el tipo de contenido adecuado\n\n      }); // Enviamos una solicitud POST con los criterios en el cuerpo\n\n      return this.http.post(`${environment.urlApi}articulos/exportarExcel`, criterios, {\n        headers: headers,\n        responseType: 'blob' // Esto es para manejar la respuesta del archivo binario\n\n      });\n    }\n\n  }\n\n  ArticuloService.ɵfac = function ArticuloService_Factory(t) {\n    return new (t || ArticuloService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ArticuloService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ArticuloService,\n    factory: ArticuloService.ɵfac,\n    providedIn: 'root'\n  });\n  return ArticuloService;\n})();","map":null,"metadata":{},"sourceType":"module"}