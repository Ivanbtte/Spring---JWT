{"ast":null,"code":"import { throwError, catchError, BehaviorSubject, tap, map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./encryption-service.service\";\nimport * as i3 from \"ngx-cookie-service\";\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    constructor(http, encryptionService, cookieService // Inyecta el servicio de cookies\n    ) {\n      this.http = http;\n      this.encryptionService = encryptionService;\n      this.cookieService = cookieService;\n      this.currentUserLoginOn = new BehaviorSubject(false);\n      this.currentUserData = new BehaviorSubject(\"\");\n      const token = this.cookieService.get('token') || sessionStorage.getItem('token');\n      this.currentUserLoginOn = new BehaviorSubject(!!token);\n      this.currentUserData = new BehaviorSubject(token || '');\n    }\n\n    login(credentials) {\n      // Limpiar sessionStorage y cookies antes de iniciar sesión\n      this.clearSessionAndCookies();\n      return this.http.post(environment.urlHost + \"auth/login\", credentials).pipe(tap(userData => {\n        const encryptedRole = this.encryptionService.encrypt(userData.role);\n        const encryptedInstituto = this.encryptionService.encrypt(String(userData.instituto));\n        const encryptedId = this.encryptionService.encrypt(String(userData.id));\n        const encryptedIdUser = this.encryptionService.encrypt(String(userData.idUser)); // Guardar en sessionStorage\n\n        sessionStorage.setItem(\"token\", userData.token);\n        sessionStorage.setItem(\"role\", encryptedRole);\n        sessionStorage.setItem(\"_biz_s_t_y\", encryptedInstituto);\n        sessionStorage.setItem(\"_biz_v_e_z\", encryptedId);\n        sessionStorage.setItem(\"_biz_u_s\", encryptedIdUser); // Guardar en cookies\n\n        this.cookieService.set('token', userData.token);\n        this.cookieService.set('role', encryptedRole);\n        this.cookieService.set('_biz_s_t_y', encryptedInstituto);\n        this.cookieService.set('_biz_v_e_z', encryptedId);\n        this.cookieService.set(\"_biz_u_s\", encryptedIdUser);\n        this.currentUserData.next(userData.token);\n        this.currentUserLoginOn.next(true);\n      }), map(userData => ({\n        token: userData.token,\n        role: userData.role\n      })), // Devolver ambos valores\n      catchError(this.handleError));\n    } // Método para limpiar sessionStorage y cookies\n\n\n    clearSessionAndCookies() {\n      // Limpiar sessionStorage\n      sessionStorage.clear(); // Limpiar cookies específicas\n\n      this.cookieService.delete('token');\n      this.cookieService.delete('role');\n      this.cookieService.delete('_biz_s_t_y');\n      this.cookieService.delete('_biz_v_e_z');\n      this.cookieService.delete('_biz_u_s');\n    }\n\n    logout() {\n      // Eliminar de sessionStorage\n      sessionStorage.removeItem(\"token\");\n      sessionStorage.removeItem(\"role\");\n      sessionStorage.removeItem(\"_biz_s_t_y\");\n      sessionStorage.removeItem(\"_biz_v_e_z\");\n      sessionStorage.removeItem(\"_biz_u_s\"); // Eliminar de cookies\n\n      this.cookieService.delete('token');\n      this.cookieService.delete('role');\n      this.cookieService.delete('_biz_s_t_y');\n      this.cookieService.delete('_biz_v_e_z');\n      this.cookieService.delete(\"_biz_u_s\");\n      this.currentUserLoginOn.next(false);\n    }\n\n    handleError(error) {\n      if (error.status === 0) {\n        console.error('Se ha producio un error ', error.error);\n      } else {\n        console.error('Backend retornó el código de estado ', error);\n      }\n\n      return throwError(() => new Error('Algo falló. Por favor intente nuevamente.'));\n    }\n\n    get userData() {\n      return this.currentUserData.asObservable();\n    }\n\n    get userLoginOn() {\n      return this.currentUserLoginOn.asObservable();\n    }\n\n    get userToken() {\n      return this.currentUserData.value;\n    }\n\n    getUserRole() {\n      const role = this.cookieService.get('role') || sessionStorage.getItem('role');\n      return this.encryptionService.decrypt(role || '');\n    }\n\n    getInstituto() {\n      const instituto = this.cookieService.get('_biz_s_t_y') || sessionStorage.getItem('_biz_s_t_y');\n      return this.encryptionService.decrypt(instituto || '');\n    }\n\n    getId() {\n      const id = this.cookieService.get('_biz_v_e_z') || sessionStorage.getItem('_biz_v_e_z');\n      return this.encryptionService.decrypt(id || '');\n    }\n\n    getIdUser() {\n      const idU = this.cookieService.get('_biz_u_s') || sessionStorage.getItem('_biz_u_s');\n      return this.encryptionService.decrypt(idU || '');\n    }\n\n  }\n\n  LoginService.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.EncryptionServiceService), i0.ɵɵinject(i3.CookieService));\n  };\n\n  LoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module"}