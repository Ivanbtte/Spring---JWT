{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getUser(id) {\n      return this.http.get(environment.urlApi + \"user/\" + id).pipe(catchError(this.handleError));\n    }\n\n    getUsers() {\n      return this.http.get(`${environment.urlApi}user`).pipe(catchError(this.handleError));\n    }\n\n    createUser(user) {\n      return this.http.post(`${environment.urlApi}user`, user).pipe(catchError(this.handleError));\n    }\n\n    updateUser(id, user) {\n      return this.http.put(`${environment.urlApi}user/${id}`, user).pipe(catchError(this.handleError));\n    }\n\n    deleteUser(id) {\n      return this.http.delete(`${environment.urlApi}user/${id}`).pipe(catchError(this.handleError));\n    }\n\n    disableUser(id) {\n      return this.http.put(`${environment.urlApi}user/${id}/disable`, {}).pipe(catchError(this.handleError));\n    }\n\n    enableUser(id) {\n      return this.http.put(`${environment.urlApi}user/${id}/enable`, {}).pipe(catchError(this.handleError));\n    }\n\n    handleError(error) {\n      if (error.status === 0) {\n        console.error('Se ha producido un error ', error.error);\n      } else {\n        console.error('Backend retornó el código de estado ', error.status, error.error);\n      }\n\n      return throwError(() => new Error('Algo falló. Por favor intente nuevamente.'));\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}