{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Pipe, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nfunction PaginationControlsComponent_ul_3_li_1_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 12);\n    i0.ɵɵlistener(\"keyup.enter\", function PaginationControlsComponent_ul_3_li_1_a_1_Template_a_keyup_enter_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      i0.ɵɵnextContext(3);\n\n      const _r0 = i0.ɵɵreference(1);\n\n      return i0.ɵɵresetView(_r0.previous());\n    })(\"click\", function PaginationControlsComponent_ul_3_li_1_a_1_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      i0.ɵɵnextContext(3);\n\n      const _r0 = i0.ɵɵreference(1);\n\n      return i0.ɵɵresetView(_r0.previous());\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.previousLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r5.screenReaderPageLabel);\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_1_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.previousLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r6.screenReaderPageLabel);\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 9);\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_1_a_1_Template, 4, 2, \"a\", 10);\n    i0.ɵɵtemplate(2, PaginationControlsComponent_ul_3_li_1_span_2_Template, 4, 2, \"span\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext(2);\n\n    const _r0 = i0.ɵɵreference(1);\n\n    i0.ɵɵclassProp(\"disabled\", _r0.isFirstPage());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", 1 < _r0.getCurrent());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.isFirstPage());\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_4_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 12);\n    i0.ɵɵlistener(\"keyup.enter\", function PaginationControlsComponent_ul_3_li_4_a_1_Template_a_keyup_enter_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const page_r10 = i0.ɵɵnextContext().$implicit;\n      i0.ɵɵnextContext(2);\n\n      const _r0 = i0.ɵɵreference(1);\n\n      return i0.ɵɵresetView(_r0.setCurrent(page_r10.value));\n    })(\"click\", function PaginationControlsComponent_ul_3_li_4_a_1_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const page_r10 = i0.ɵɵnextContext().$implicit;\n      i0.ɵɵnextContext(2);\n\n      const _r0 = i0.ɵɵreference(1);\n\n      return i0.ɵɵresetView(_r0.setCurrent(page_r10.value));\n    });\n    i0.ɵɵelementStart(1, \"span\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"number\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const page_r10 = i0.ɵɵnextContext().$implicit;\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r11.screenReaderPageLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(page_r10.label === \"...\" ? page_r10.label : i0.ɵɵpipeBind2(5, 2, page_r10.label, \"\"));\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_4_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"span\", 16)(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"number\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const page_r10 = i0.ɵɵnextContext().$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r12.screenReaderCurrentLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(page_r10.label === \"...\" ? page_r10.label : i0.ɵɵpipeBind2(6, 2, page_r10.label, \"\"));\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_4_a_1_Template, 6, 5, \"a\", 10);\n    i0.ɵɵtemplate(2, PaginationControlsComponent_ul_3_li_4_ng_container_2_Template, 7, 5, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const page_r10 = ctx.$implicit;\n    i0.ɵɵnextContext(2);\n\n    const _r0 = i0.ɵɵreference(1);\n\n    i0.ɵɵclassProp(\"current\", _r0.getCurrent() === page_r10.value)(\"ellipsis\", page_r10.label === \"...\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.getCurrent() !== page_r10.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.getCurrent() === page_r10.value);\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_5_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 12);\n    i0.ɵɵlistener(\"keyup.enter\", function PaginationControlsComponent_ul_3_li_5_a_1_Template_a_keyup_enter_0_listener() {\n      i0.ɵɵrestoreView(_r23);\n      i0.ɵɵnextContext(3);\n\n      const _r0 = i0.ɵɵreference(1);\n\n      return i0.ɵɵresetView(_r0.next());\n    })(\"click\", function PaginationControlsComponent_ul_3_li_5_a_1_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r23);\n      i0.ɵɵnextContext(3);\n\n      const _r0 = i0.ɵɵreference(1);\n\n      return i0.ɵɵresetView(_r0.next());\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r20.nextLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r20.screenReaderPageLabel);\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_5_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r21.nextLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r21.screenReaderPageLabel);\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 17);\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_5_a_1_Template, 4, 2, \"a\", 10);\n    i0.ɵɵtemplate(2, PaginationControlsComponent_ul_3_li_5_span_2_Template, 4, 2, \"span\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext(2);\n\n    const _r0 = i0.ɵɵreference(1);\n\n    i0.ɵɵclassProp(\"disabled\", _r0.isLastPage());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !_r0.isLastPage());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.isLastPage());\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 4);\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_1_Template, 3, 4, \"li\", 5);\n    i0.ɵɵelementStart(2, \"li\", 6);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, PaginationControlsComponent_ul_3_li_4_Template, 3, 6, \"li\", 7);\n    i0.ɵɵtemplate(5, PaginationControlsComponent_ul_3_li_5_Template, 3, 4, \"li\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n\n    const _r0 = i0.ɵɵreference(1);\n\n    i0.ɵɵclassProp(\"responsive\", ctx_r1.responsive);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.directionLinks);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" \", _r0.getCurrent(), \" / \", _r0.getLastPage(), \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", _r0.pages)(\"ngForTrackBy\", ctx_r1.trackByIndex);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.directionLinks);\n  }\n}\n\nclass PaginationService {\n  constructor() {\n    this.change = new EventEmitter();\n    this.instances = {};\n    this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\n  }\n\n  defaultId() {\n    return this.DEFAULT_ID;\n  }\n  /**\r\n   * Register a PaginationInstance with this service. Returns a\r\n   * boolean value signifying whether the instance is new or\r\n   * updated (true = new or updated, false = unchanged).\r\n   */\n\n\n  register(instance) {\n    if (instance.id == null) {\n      instance.id = this.DEFAULT_ID;\n    }\n\n    if (!this.instances[instance.id]) {\n      this.instances[instance.id] = instance;\n      return true;\n    } else {\n      return this.updateInstance(instance);\n    }\n  }\n  /**\r\n   * Check each property of the instance and update any that have changed. Return\r\n   * true if any changes were made, else return false.\r\n   */\n\n\n  updateInstance(instance) {\n    let changed = false;\n\n    for (let prop in this.instances[instance.id]) {\n      if (instance[prop] !== this.instances[instance.id][prop]) {\n        this.instances[instance.id][prop] = instance[prop];\n        changed = true;\n      }\n    }\n\n    return changed;\n  }\n  /**\r\n   * Returns the current page number.\r\n   */\n\n\n  getCurrentPage(id) {\n    if (this.instances[id]) {\n      return this.instances[id].currentPage;\n    }\n\n    return 1;\n  }\n  /**\r\n   * Sets the current page number.\r\n   */\n\n\n  setCurrentPage(id, page) {\n    if (this.instances[id]) {\n      let instance = this.instances[id];\n      let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\n\n      if (page <= maxPage && 1 <= page) {\n        this.instances[id].currentPage = page;\n        this.change.emit(id);\n      }\n    }\n  }\n  /**\r\n   * Sets the value of instance.totalItems\r\n   */\n\n\n  setTotalItems(id, totalItems) {\n    if (this.instances[id] && 0 <= totalItems) {\n      this.instances[id].totalItems = totalItems;\n      this.change.emit(id);\n    }\n  }\n  /**\r\n   * Sets the value of instance.itemsPerPage.\r\n   */\n\n\n  setItemsPerPage(id, itemsPerPage) {\n    if (this.instances[id]) {\n      this.instances[id].itemsPerPage = itemsPerPage;\n      this.change.emit(id);\n    }\n  }\n  /**\r\n   * Returns a clone of the pagination instance object matching the id. If no\r\n   * id specified, returns the instance corresponding to the default id.\r\n   */\n\n\n  getInstance(id = this.DEFAULT_ID) {\n    if (this.instances[id]) {\n      return this.clone(this.instances[id]);\n    }\n\n    return {};\n  }\n  /**\r\n   * Perform a shallow clone of an object.\r\n   */\n\n\n  clone(obj) {\n    var target = {};\n\n    for (var i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        target[i] = obj[i];\n      }\n    }\n\n    return target;\n  }\n\n}\n\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\n\nclass PaginatePipe {\n  constructor(service) {\n    this.service = service; // store the values from the last time the pipe was invoked\n\n    this.state = {};\n  }\n\n  transform(collection, args) {\n    // When an observable is passed through the AsyncPipe, it will output\n    // `null` until the subscription resolves. In this case, we want to\n    // use the cached data from the `state` object to prevent the NgFor\n    // from flashing empty until the real values arrive.\n    if (!(collection instanceof Array)) {\n      let _id = args.id || this.service.defaultId();\n\n      if (this.state[_id]) {\n        return this.state[_id].slice;\n      } else {\n        return collection;\n      }\n    }\n\n    let serverSideMode = args.totalItems && args.totalItems !== collection.length;\n    let instance = this.createInstance(collection, args);\n    let id = instance.id;\n    let start, end;\n    let perPage = instance.itemsPerPage;\n    let emitChange = this.service.register(instance);\n\n    if (!serverSideMode && collection instanceof Array) {\n      perPage = +perPage || LARGE_NUMBER;\n      start = (instance.currentPage - 1) * perPage;\n      end = start + perPage;\n      let isIdentical = this.stateIsIdentical(id, collection, start, end);\n\n      if (isIdentical) {\n        return this.state[id].slice;\n      } else {\n        let slice = collection.slice(start, end);\n        this.saveState(id, collection, slice, start, end);\n        this.service.change.emit(id);\n        return slice;\n      }\n    } else {\n      if (emitChange) {\n        this.service.change.emit(id);\n      } // save the state for server-side collection to avoid null\n      // flash as new data loads.\n\n\n      this.saveState(id, collection, collection, start, end);\n      return collection;\n    }\n  }\n  /**\r\n   * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n   */\n\n\n  createInstance(collection, config) {\n    this.checkConfig(config);\n    return {\n      id: config.id != null ? config.id : this.service.defaultId(),\n      itemsPerPage: +config.itemsPerPage || 0,\n      currentPage: +config.currentPage || 1,\n      totalItems: +config.totalItems || collection.length\n    };\n  }\n  /**\r\n   * Ensure the argument passed to the filter contains the required properties.\r\n   */\n\n\n  checkConfig(config) {\n    const required = ['itemsPerPage', 'currentPage'];\n    const missing = required.filter(prop => !(prop in config));\n\n    if (0 < missing.length) {\n      throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\n    }\n  }\n  /**\r\n   * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n   * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n   * need to check that the collection, start and end points are all identical, and if so, return the\r\n   * last sliced array.\r\n   */\n\n\n  saveState(id, collection, slice, start, end) {\n    this.state[id] = {\n      collection,\n      size: collection.length,\n      slice,\n      start,\n      end\n    };\n  }\n  /**\r\n   * For a given id, returns true if the collection, size, start and end values are identical.\r\n   */\n\n\n  stateIsIdentical(id, collection, start, end) {\n    let state = this.state[id];\n\n    if (!state) {\n      return false;\n    }\n\n    let isMetaDataIdentical = state.size === collection.length && state.start === start && state.end === end;\n\n    if (!isMetaDataIdentical) {\n      return false;\n    }\n\n    return state.slice.every((element, index) => element === collection[start + index]);\n  }\n\n}\n\nPaginatePipe.ɵfac = function PaginatePipe_Factory(t) {\n  return new (t || PaginatePipe)(i0.ɵɵdirectiveInject(PaginationService, 16));\n};\n\nPaginatePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"paginate\",\n  type: PaginatePipe,\n  pure: false\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PaginatePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'paginate',\n      pure: false\n    }]\n  }], function () {\n    return [{\n      type: PaginationService\n    }];\n  }, null);\n})();\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\n\n\nconst DEFAULT_TEMPLATE = `\n    <pagination-template  #p=\"paginationApi\"\n                         [id]=\"id\"\n                         [maxSize]=\"maxSize\"\n                         (pageChange)=\"pageChange.emit($event)\"\n                         (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\">\n    <nav role=\"navigation\" [attr.aria-label]=\"screenReaderPaginationLabel\">\n    <ul class=\"ngx-pagination\" \n        [class.responsive]=\"responsive\"\n        *ngIf=\"!(autoHide && p.pages.length <= 1)\">\n\n        <li class=\"pagination-previous\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\"> \n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\">\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </a>\n            <span *ngIf=\"p.isFirstPage()\" aria-disabled=\"true\">\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li> \n\n        <li class=\"small-screen\">\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\n        </li>\n\n        <li [class.current]=\"p.getCurrent() === page.value\" \n            [class.ellipsis]=\"page.label === '...'\"\n            *ngFor=\"let page of p.pages; trackBy: trackByIndex\">\n            <a tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\" (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\n                <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\n            </a>\n            <ng-container *ngIf=\"p.getCurrent() === page.value\">\n              <span aria-live=\"polite\">\n                <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \n              </span>\n            </ng-container>\n        </li>\n\n        <li class=\"pagination-next\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\n            <a tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\">\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </a>\n            <span *ngIf=\"p.isLastPage()\" aria-disabled=\"true\">\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li>\n\n    </ul>\n    </nav>\n    </pagination-template>\n    `;\nconst DEFAULT_STYLES = `\n.ngx-pagination {\n  margin-left: 0;\n  margin-bottom: 1rem; }\n  .ngx-pagination::before, .ngx-pagination::after {\n    content: ' ';\n    display: table; }\n  .ngx-pagination::after {\n    clear: both; }\n  .ngx-pagination li {\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    margin-right: 0.0625rem;\n    border-radius: 0; }\n  .ngx-pagination li {\n    display: inline-block; }\n  .ngx-pagination a,\n  .ngx-pagination button {\n    color: #0a0a0a; \n    display: block;\n    padding: 0.1875rem 0.625rem;\n    border-radius: 0; }\n    .ngx-pagination a:hover,\n    .ngx-pagination button:hover {\n      background: #e6e6e6; }\n  .ngx-pagination .current {\n    padding: 0.1875rem 0.625rem;\n    background: #2199e8;\n    color: #fefefe;\n    cursor: default; }\n  .ngx-pagination .disabled {\n    padding: 0.1875rem 0.625rem;\n    color: #cacaca;\n    cursor: default; } \n    .ngx-pagination .disabled:hover {\n      background: transparent; }\n  .ngx-pagination a, .ngx-pagination button {\n    cursor: pointer; }\n\n.ngx-pagination .pagination-previous a::before,\n.ngx-pagination .pagination-previous.disabled::before { \n  content: '«';\n  display: inline-block;\n  margin-right: 0.5rem; }\n\n.ngx-pagination .pagination-next a::after,\n.ngx-pagination .pagination-next.disabled::after {\n  content: '»';\n  display: inline-block;\n  margin-left: 0.5rem; }\n\n.ngx-pagination .show-for-sr {\n  position: absolute !important;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0); }\n.ngx-pagination .small-screen {\n  display: none; }\n@media screen and (max-width: 601px) {\n  .ngx-pagination.responsive .small-screen {\n    display: inline-block; } \n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\n    display: none; }\n}\n  `;\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\n\nclass PaginationControlsDirective {\n  constructor(service, changeDetectorRef) {\n    this.service = service;\n    this.changeDetectorRef = changeDetectorRef;\n    this.maxSize = 7;\n    this.pageChange = new EventEmitter();\n    this.pageBoundsCorrection = new EventEmitter();\n    this.pages = [];\n    this.changeSub = this.service.change.subscribe(id => {\n      if (this.id === id) {\n        this.updatePageLinks();\n        this.changeDetectorRef.markForCheck();\n        this.changeDetectorRef.detectChanges();\n      }\n    });\n  }\n\n  ngOnInit() {\n    if (this.id === undefined) {\n      this.id = this.service.defaultId();\n    }\n\n    this.updatePageLinks();\n  }\n\n  ngOnChanges(changes) {\n    this.updatePageLinks();\n  }\n\n  ngOnDestroy() {\n    this.changeSub.unsubscribe();\n  }\n  /**\r\n   * Go to the previous page\r\n   */\n\n\n  previous() {\n    this.checkValidId();\n    this.setCurrent(this.getCurrent() - 1);\n  }\n  /**\r\n   * Go to the next page\r\n   */\n\n\n  next() {\n    this.checkValidId();\n    this.setCurrent(this.getCurrent() + 1);\n  }\n  /**\r\n   * Returns true if current page is first page\r\n   */\n\n\n  isFirstPage() {\n    return this.getCurrent() === 1;\n  }\n  /**\r\n   * Returns true if current page is last page\r\n   */\n\n\n  isLastPage() {\n    return this.getLastPage() === this.getCurrent();\n  }\n  /**\r\n   * Set the current page number.\r\n   */\n\n\n  setCurrent(page) {\n    this.pageChange.emit(page);\n  }\n  /**\r\n   * Get the current page number.\r\n   */\n\n\n  getCurrent() {\n    return this.service.getCurrentPage(this.id);\n  }\n  /**\r\n   * Returns the last page number\r\n   */\n\n\n  getLastPage() {\n    let inst = this.service.getInstance(this.id);\n\n    if (inst.totalItems < 1) {\n      // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\n      // but it makes sense to consider a single, empty page as the last page.\n      return 1;\n    }\n\n    return Math.ceil(inst.totalItems / inst.itemsPerPage);\n  }\n\n  getTotalItems() {\n    return this.service.getInstance(this.id).totalItems;\n  }\n\n  checkValidId() {\n    if (this.service.getInstance(this.id).id == null) {\n      console.warn(`PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`);\n    }\n  }\n  /**\r\n   * Updates the page links and checks that the current page is valid. Should run whenever the\r\n   * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n   * input values changes.\r\n   */\n\n\n  updatePageLinks() {\n    let inst = this.service.getInstance(this.id);\n    const correctedCurrentPage = this.outOfBoundCorrection(inst);\n\n    if (correctedCurrentPage !== inst.currentPage) {\n      setTimeout(() => {\n        this.pageBoundsCorrection.emit(correctedCurrentPage);\n        this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\n      });\n    } else {\n      this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\n    }\n  }\n  /**\r\n   * Checks that the instance.currentPage property is within bounds for the current page range.\r\n   * If not, return a correct value for currentPage, or the current value if OK.\r\n   */\n\n\n  outOfBoundCorrection(instance) {\n    const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\n\n    if (totalPages < instance.currentPage && 0 < totalPages) {\n      return totalPages;\n    } else if (instance.currentPage < 1) {\n      return 1;\n    }\n\n    return instance.currentPage;\n  }\n  /**\r\n   * Returns an array of Page objects to use in the pagination controls.\r\n   */\n\n\n  createPageArray(currentPage, itemsPerPage, totalItems, paginationRange) {\n    // paginationRange could be a string if passed from attribute, so cast to number.\n    paginationRange = +paginationRange;\n    let pages = []; // Return 1 as default page number\n    // Make sense to show 1 instead of empty when there are no items\n\n    const totalPages = Math.max(Math.ceil(totalItems / itemsPerPage), 1);\n    const halfWay = Math.ceil(paginationRange / 2);\n    const isStart = currentPage <= halfWay;\n    const isEnd = totalPages - halfWay < currentPage;\n    const isMiddle = !isStart && !isEnd;\n    let ellipsesNeeded = paginationRange < totalPages;\n    let i = 1;\n\n    while (i <= totalPages && i <= paginationRange) {\n      let label;\n      let pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\n      let openingEllipsesNeeded = i === 2 && (isMiddle || isEnd);\n      let closingEllipsesNeeded = i === paginationRange - 1 && (isMiddle || isStart);\n\n      if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\n        label = '...';\n      } else {\n        label = pageNumber;\n      }\n\n      pages.push({\n        label: label,\n        value: pageNumber\n      });\n      i++;\n    }\n\n    return pages;\n  }\n  /**\r\n   * Given the position in the sequence of pagination links [i],\r\n   * figure out what page number corresponds to that position.\r\n   */\n\n\n  calculatePageNumber(i, currentPage, paginationRange, totalPages) {\n    let halfWay = Math.ceil(paginationRange / 2);\n\n    if (i === paginationRange) {\n      return totalPages;\n    } else if (i === 1) {\n      return i;\n    } else if (paginationRange < totalPages) {\n      if (totalPages - halfWay < currentPage) {\n        return totalPages - paginationRange + i;\n      } else if (halfWay < currentPage) {\n        return currentPage - halfWay + i;\n      } else {\n        return i;\n      }\n    } else {\n      return i;\n    }\n  }\n\n}\n\nPaginationControlsDirective.ɵfac = function PaginationControlsDirective_Factory(t) {\n  return new (t || PaginationControlsDirective)(i0.ɵɵdirectiveInject(PaginationService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nPaginationControlsDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: PaginationControlsDirective,\n  selectors: [[\"pagination-template\"], [\"\", \"pagination-template\", \"\"]],\n  inputs: {\n    id: \"id\",\n    maxSize: \"maxSize\"\n  },\n  outputs: {\n    pageChange: \"pageChange\",\n    pageBoundsCorrection: \"pageBoundsCorrection\"\n  },\n  exportAs: [\"paginationApi\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PaginationControlsDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'pagination-template,[pagination-template]',\n      exportAs: 'paginationApi'\n    }]\n  }], function () {\n    return [{\n      type: PaginationService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    maxSize: [{\n      type: Input\n    }],\n    pageChange: [{\n      type: Output\n    }],\n    pageBoundsCorrection: [{\n      type: Output\n    }]\n  });\n})();\n\nfunction coerceToBoolean(input) {\n  return !!input && input !== 'false';\n}\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\n\n\nclass PaginationControlsComponent {\n  constructor() {\n    this.maxSize = 7;\n    this.previousLabel = 'Previous';\n    this.nextLabel = 'Next';\n    this.screenReaderPaginationLabel = 'Pagination';\n    this.screenReaderPageLabel = 'page';\n    this.screenReaderCurrentLabel = `You're on page`;\n    this.pageChange = new EventEmitter();\n    this.pageBoundsCorrection = new EventEmitter();\n    this._directionLinks = true;\n    this._autoHide = false;\n    this._responsive = false;\n  }\n\n  get directionLinks() {\n    return this._directionLinks;\n  }\n\n  set directionLinks(value) {\n    this._directionLinks = coerceToBoolean(value);\n  }\n\n  get autoHide() {\n    return this._autoHide;\n  }\n\n  set autoHide(value) {\n    this._autoHide = coerceToBoolean(value);\n  }\n\n  get responsive() {\n    return this._responsive;\n  }\n\n  set responsive(value) {\n    this._responsive = coerceToBoolean(value);\n  }\n\n  trackByIndex(index) {\n    return index;\n  }\n\n}\n\nPaginationControlsComponent.ɵfac = function PaginationControlsComponent_Factory(t) {\n  return new (t || PaginationControlsComponent)();\n};\n\nPaginationControlsComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PaginationControlsComponent,\n  selectors: [[\"pagination-controls\"]],\n  inputs: {\n    id: \"id\",\n    maxSize: \"maxSize\",\n    directionLinks: \"directionLinks\",\n    autoHide: \"autoHide\",\n    responsive: \"responsive\",\n    previousLabel: \"previousLabel\",\n    nextLabel: \"nextLabel\",\n    screenReaderPaginationLabel: \"screenReaderPaginationLabel\",\n    screenReaderPageLabel: \"screenReaderPageLabel\",\n    screenReaderCurrentLabel: \"screenReaderCurrentLabel\"\n  },\n  outputs: {\n    pageChange: \"pageChange\",\n    pageBoundsCorrection: \"pageBoundsCorrection\"\n  },\n  decls: 4,\n  vars: 4,\n  consts: [[3, \"id\", \"maxSize\", \"pageChange\", \"pageBoundsCorrection\"], [\"p\", \"paginationApi\"], [\"role\", \"navigation\"], [\"class\", \"ngx-pagination\", 3, \"responsive\", 4, \"ngIf\"], [1, \"ngx-pagination\"], [\"class\", \"pagination-previous\", 3, \"disabled\", 4, \"ngIf\"], [1, \"small-screen\"], [3, \"current\", \"ellipsis\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"class\", \"pagination-next\", 3, \"disabled\", 4, \"ngIf\"], [1, \"pagination-previous\"], [\"tabindex\", \"0\", 3, \"keyup.enter\", \"click\", 4, \"ngIf\"], [\"aria-disabled\", \"true\", 4, \"ngIf\"], [\"tabindex\", \"0\", 3, \"keyup.enter\", \"click\"], [1, \"show-for-sr\"], [\"aria-disabled\", \"true\"], [4, \"ngIf\"], [\"aria-live\", \"polite\"], [1, \"pagination-next\"]],\n  template: function PaginationControlsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"pagination-template\", 0, 1);\n      i0.ɵɵlistener(\"pageChange\", function PaginationControlsComponent_Template_pagination_template_pageChange_0_listener($event) {\n        return ctx.pageChange.emit($event);\n      })(\"pageBoundsCorrection\", function PaginationControlsComponent_Template_pagination_template_pageBoundsCorrection_0_listener($event) {\n        return ctx.pageBoundsCorrection.emit($event);\n      });\n      i0.ɵɵelementStart(2, \"nav\", 2);\n      i0.ɵɵtemplate(3, PaginationControlsComponent_ul_3_Template, 6, 8, \"ul\", 3);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n\n      i0.ɵɵproperty(\"id\", ctx.id)(\"maxSize\", ctx.maxSize);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"aria-label\", ctx.screenReaderPaginationLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !(ctx.autoHide && _r0.pages.length <= 1));\n    }\n  },\n  dependencies: [PaginationControlsDirective, i2.NgIf, i2.NgForOf, i2.DecimalPipe],\n  styles: [\".ngx-pagination{margin-left:0;margin-bottom:1rem}.ngx-pagination:before,.ngx-pagination:after{content:\\\" \\\";display:table}.ngx-pagination:after{clear:both}.ngx-pagination li{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;margin-right:.0625rem;border-radius:0}.ngx-pagination li{display:inline-block}.ngx-pagination a,.ngx-pagination button{color:#0a0a0a;display:block;padding:.1875rem .625rem;border-radius:0}.ngx-pagination a:hover,.ngx-pagination button:hover{background:#e6e6e6}.ngx-pagination .current{padding:.1875rem .625rem;background:#2199e8;color:#fefefe;cursor:default}.ngx-pagination .disabled{padding:.1875rem .625rem;color:#cacaca;cursor:default}.ngx-pagination .disabled:hover{background:transparent}.ngx-pagination a,.ngx-pagination button{cursor:pointer}.ngx-pagination .pagination-previous a:before,.ngx-pagination .pagination-previous.disabled:before{content:\\\"\\\\ab\\\";display:inline-block;margin-right:.5rem}.ngx-pagination .pagination-next a:after,.ngx-pagination .pagination-next.disabled:after{content:\\\"\\\\bb\\\";display:inline-block;margin-left:.5rem}.ngx-pagination .show-for-sr{position:absolute!important;width:1px;height:1px;overflow:hidden;clip:rect(0,0,0,0)}.ngx-pagination .small-screen{display:none}@media screen and (max-width: 601px){.ngx-pagination.responsive .small-screen{display:inline-block}.ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next){display:none}}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PaginationControlsComponent, [{\n    type: Component,\n    args: [{\n      selector: 'pagination-controls',\n      template: DEFAULT_TEMPLATE,\n      styles: [DEFAULT_STYLES],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, {\n    id: [{\n      type: Input\n    }],\n    maxSize: [{\n      type: Input\n    }],\n    directionLinks: [{\n      type: Input\n    }],\n    autoHide: [{\n      type: Input\n    }],\n    responsive: [{\n      type: Input\n    }],\n    previousLabel: [{\n      type: Input\n    }],\n    nextLabel: [{\n      type: Input\n    }],\n    screenReaderPaginationLabel: [{\n      type: Input\n    }],\n    screenReaderPageLabel: [{\n      type: Input\n    }],\n    screenReaderCurrentLabel: [{\n      type: Input\n    }],\n    pageChange: [{\n      type: Output\n    }],\n    pageBoundsCorrection: [{\n      type: Output\n    }]\n  });\n})();\n\nclass NgxPaginationModule {}\n\nNgxPaginationModule.ɵfac = function NgxPaginationModule_Factory(t) {\n  return new (t || NgxPaginationModule)();\n};\n\nNgxPaginationModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxPaginationModule\n});\nNgxPaginationModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [PaginationService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPaginationModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective],\n      providers: [PaginationService],\n      exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of ngx-pagination\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgxPaginationModule, PaginatePipe, PaginationControlsComponent, PaginationControlsDirective, PaginationService };","map":{"version":3,"names":["i0","EventEmitter","Pipe","Directive","Input","Output","Component","ChangeDetectionStrategy","ViewEncapsulation","NgModule","i2","CommonModule","PaginationService","constructor","change","instances","DEFAULT_ID","defaultId","register","instance","id","updateInstance","changed","prop","getCurrentPage","currentPage","setCurrentPage","page","maxPage","Math","ceil","totalItems","itemsPerPage","emit","setTotalItems","setItemsPerPage","getInstance","clone","obj","target","i","hasOwnProperty","LARGE_NUMBER","Number","MAX_SAFE_INTEGER","PaginatePipe","service","state","transform","collection","args","Array","_id","slice","serverSideMode","length","createInstance","start","end","perPage","emitChange","isIdentical","stateIsIdentical","saveState","config","checkConfig","required","missing","filter","Error","join","size","isMetaDataIdentical","every","element","index","ɵfac","ɵpipe","type","name","pure","DEFAULT_TEMPLATE","DEFAULT_STYLES","PaginationControlsDirective","changeDetectorRef","maxSize","pageChange","pageBoundsCorrection","pages","changeSub","subscribe","updatePageLinks","markForCheck","detectChanges","ngOnInit","undefined","ngOnChanges","changes","ngOnDestroy","unsubscribe","previous","checkValidId","setCurrent","getCurrent","next","isFirstPage","isLastPage","getLastPage","inst","getTotalItems","console","warn","correctedCurrentPage","outOfBoundCorrection","setTimeout","createPageArray","totalPages","paginationRange","max","halfWay","isStart","isEnd","isMiddle","ellipsesNeeded","label","pageNumber","calculatePageNumber","openingEllipsesNeeded","closingEllipsesNeeded","push","value","ChangeDetectorRef","ɵdir","selector","exportAs","coerceToBoolean","input","PaginationControlsComponent","previousLabel","nextLabel","screenReaderPaginationLabel","screenReaderPageLabel","screenReaderCurrentLabel","_directionLinks","_autoHide","_responsive","directionLinks","autoHide","responsive","trackByIndex","ɵcmp","NgIf","NgForOf","DecimalPipe","template","styles","changeDetection","OnPush","encapsulation","None","NgxPaginationModule","ɵmod","ɵinj","imports","declarations","providers","exports"],"sources":["D:/Documentos/Spring + JWT/frontend/node_modules/ngx-pagination/fesm2020/ngx-pagination.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Pipe, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass PaginationService {\r\n    constructor() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    defaultId() { return this.DEFAULT_ID; }\r\n    /**\r\n     * Register a PaginationInstance with this service. Returns a\r\n     * boolean value signifying whether the instance is new or\r\n     * updated (true = new or updated, false = unchanged).\r\n     */\r\n    register(instance) {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            return true;\r\n        }\r\n        else {\r\n            return this.updateInstance(instance);\r\n        }\r\n    }\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    updateInstance(instance) {\r\n        let changed = false;\r\n        for (let prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    getCurrentPage(id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n        return 1;\r\n    }\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    setCurrentPage(id, page) {\r\n        if (this.instances[id]) {\r\n            let instance = this.instances[id];\r\n            let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    setTotalItems(id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    setItemsPerPage(id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    getInstance(id = this.DEFAULT_ID) {\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    }\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    clone(obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n}\n\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nclass PaginatePipe {\r\n    constructor(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    transform(collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (!(collection instanceof Array)) {\r\n            let _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        let serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        let instance = this.createInstance(collection, args);\r\n        let id = instance.id;\r\n        let start, end;\r\n        let perPage = instance.itemsPerPage;\r\n        let emitChange = this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            let isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                let slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        else {\r\n            if (emitChange) {\r\n                this.service.change.emit(id);\r\n            }\r\n            // save the state for server-side collection to avoid null\r\n            // flash as new data loads.\r\n            this.saveState(id, collection, collection, start, end);\r\n            return collection;\r\n        }\r\n    }\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    createInstance(collection, config) {\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    }\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    checkConfig(config) {\r\n        const required = ['itemsPerPage', 'currentPage'];\r\n        const missing = required.filter(prop => !(prop in config));\r\n        if (0 < missing.length) {\r\n            throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\r\n        }\r\n    }\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    saveState(id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection,\r\n            size: collection.length,\r\n            slice,\r\n            start,\r\n            end\r\n        };\r\n    }\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    stateIsIdentical(id, collection, start, end) {\r\n        let state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        let isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every((element, index) => element === collection[start + index]);\r\n    }\r\n}\r\nPaginatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, deps: [{ token: PaginationService }], target: i0.ɵɵFactoryTarget.Pipe });\r\nPaginatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, name: \"paginate\", pure: false });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'paginate',\r\n                    pure: false\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PaginationService }]; } });\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\nconst DEFAULT_TEMPLATE = `\r\n    <pagination-template  #p=\"paginationApi\"\r\n                         [id]=\"id\"\r\n                         [maxSize]=\"maxSize\"\r\n                         (pageChange)=\"pageChange.emit($event)\"\r\n                         (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\">\r\n    <nav role=\"navigation\" [attr.aria-label]=\"screenReaderPaginationLabel\">\r\n    <ul class=\"ngx-pagination\" \r\n        [class.responsive]=\"responsive\"\r\n        *ngIf=\"!(autoHide && p.pages.length <= 1)\">\r\n\r\n        <li class=\"pagination-previous\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\"> \r\n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isFirstPage()\" aria-disabled=\"true\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li> \r\n\r\n        <li class=\"small-screen\">\r\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\r\n        </li>\r\n\r\n        <li [class.current]=\"p.getCurrent() === page.value\" \r\n            [class.ellipsis]=\"page.label === '...'\"\r\n            *ngFor=\"let page of p.pages; trackBy: trackByIndex\">\r\n            <a tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\" (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\r\n                <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\r\n            </a>\r\n            <ng-container *ngIf=\"p.getCurrent() === page.value\">\r\n              <span aria-live=\"polite\">\r\n                <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \r\n              </span>\r\n            </ng-container>\r\n        </li>\r\n\r\n        <li class=\"pagination-next\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\r\n            <a tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isLastPage()\" aria-disabled=\"true\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li>\r\n\r\n    </ul>\r\n    </nav>\r\n    </pagination-template>\r\n    `;\r\nconst DEFAULT_STYLES = `\r\n.ngx-pagination {\r\n  margin-left: 0;\r\n  margin-bottom: 1rem; }\r\n  .ngx-pagination::before, .ngx-pagination::after {\r\n    content: ' ';\r\n    display: table; }\r\n  .ngx-pagination::after {\r\n    clear: both; }\r\n  .ngx-pagination li {\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    margin-right: 0.0625rem;\r\n    border-radius: 0; }\r\n  .ngx-pagination li {\r\n    display: inline-block; }\r\n  .ngx-pagination a,\r\n  .ngx-pagination button {\r\n    color: #0a0a0a; \r\n    display: block;\r\n    padding: 0.1875rem 0.625rem;\r\n    border-radius: 0; }\r\n    .ngx-pagination a:hover,\r\n    .ngx-pagination button:hover {\r\n      background: #e6e6e6; }\r\n  .ngx-pagination .current {\r\n    padding: 0.1875rem 0.625rem;\r\n    background: #2199e8;\r\n    color: #fefefe;\r\n    cursor: default; }\r\n  .ngx-pagination .disabled {\r\n    padding: 0.1875rem 0.625rem;\r\n    color: #cacaca;\r\n    cursor: default; } \r\n    .ngx-pagination .disabled:hover {\r\n      background: transparent; }\r\n  .ngx-pagination a, .ngx-pagination button {\r\n    cursor: pointer; }\r\n\r\n.ngx-pagination .pagination-previous a::before,\r\n.ngx-pagination .pagination-previous.disabled::before { \r\n  content: '«';\r\n  display: inline-block;\r\n  margin-right: 0.5rem; }\r\n\r\n.ngx-pagination .pagination-next a::after,\r\n.ngx-pagination .pagination-next.disabled::after {\r\n  content: '»';\r\n  display: inline-block;\r\n  margin-left: 0.5rem; }\r\n\r\n.ngx-pagination .show-for-sr {\r\n  position: absolute !important;\r\n  width: 1px;\r\n  height: 1px;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0); }\r\n.ngx-pagination .small-screen {\r\n  display: none; }\r\n@media screen and (max-width: 601px) {\r\n  .ngx-pagination.responsive .small-screen {\r\n    display: inline-block; } \r\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\r\n    display: none; }\r\n}\r\n  `;\n\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nclass PaginationControlsDirective {\r\n    constructor(service, changeDetectorRef) {\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(id => {\r\n            if (this.id === id) {\r\n                this.updatePageLinks();\r\n                this.changeDetectorRef.markForCheck();\r\n                this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    }\r\n    ngOnChanges(changes) {\r\n        this.updatePageLinks();\r\n    }\r\n    ngOnDestroy() {\r\n        this.changeSub.unsubscribe();\r\n    }\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    previous() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    }\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    next() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    }\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    isFirstPage() {\r\n        return this.getCurrent() === 1;\r\n    }\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    isLastPage() {\r\n        return this.getLastPage() === this.getCurrent();\r\n    }\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    setCurrent(page) {\r\n        this.pageChange.emit(page);\r\n    }\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    getCurrent() {\r\n        return this.service.getCurrentPage(this.id);\r\n    }\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    getLastPage() {\r\n        let inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    }\r\n    getTotalItems() {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    }\r\n    checkValidId() {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(`PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`);\r\n        }\r\n    }\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    updatePageLinks() {\r\n        let inst = this.service.getInstance(this.id);\r\n        const correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(() => {\r\n                this.pageBoundsCorrection.emit(correctedCurrentPage);\r\n                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    }\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    outOfBoundCorrection(instance) {\r\n        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    }\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    createPageArray(currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        let pages = [];\r\n        // Return 1 as default page number\r\n        // Make sense to show 1 instead of empty when there are no items\r\n        const totalPages = Math.max(Math.ceil(totalItems / itemsPerPage), 1);\r\n        const halfWay = Math.ceil(paginationRange / 2);\r\n        const isStart = currentPage <= halfWay;\r\n        const isEnd = totalPages - halfWay < currentPage;\r\n        const isMiddle = !isStart && !isEnd;\r\n        let ellipsesNeeded = paginationRange < totalPages;\r\n        let i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            let label;\r\n            let pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            let openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            let closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    }\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    calculatePageNumber(i, currentPage, paginationRange, totalPages) {\r\n        let halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    }\r\n}\r\nPaginationControlsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsDirective, deps: [{ token: PaginationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nPaginationControlsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.9\", type: PaginationControlsDirective, selector: \"pagination-template,[pagination-template]\", inputs: { id: \"id\", maxSize: \"maxSize\" }, outputs: { pageChange: \"pageChange\", pageBoundsCorrection: \"pageBoundsCorrection\" }, exportAs: [\"paginationApi\"], usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'pagination-template,[pagination-template]',\r\n                    exportAs: 'paginationApi'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PaginationService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { id: [{\r\n                type: Input\r\n            }], maxSize: [{\r\n                type: Input\r\n            }], pageChange: [{\r\n                type: Output\r\n            }], pageBoundsCorrection: [{\r\n                type: Output\r\n            }] } });\n\nfunction coerceToBoolean(input) {\r\n    return !!input && input !== 'false';\r\n}\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nclass PaginationControlsComponent {\r\n    constructor() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = `You're on page`;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n        this._responsive = false;\r\n    }\r\n    get directionLinks() {\r\n        return this._directionLinks;\r\n    }\r\n    set directionLinks(value) {\r\n        this._directionLinks = coerceToBoolean(value);\r\n    }\r\n    get autoHide() {\r\n        return this._autoHide;\r\n    }\r\n    set autoHide(value) {\r\n        this._autoHide = coerceToBoolean(value);\r\n    }\r\n    get responsive() {\r\n        return this._responsive;\r\n    }\r\n    set responsive(value) {\r\n        this._responsive = coerceToBoolean(value);\r\n    }\r\n    trackByIndex(index) {\r\n        return index;\r\n    }\r\n}\r\nPaginationControlsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nPaginationControlsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.9\", type: PaginationControlsComponent, selector: \"pagination-controls\", inputs: { id: \"id\", maxSize: \"maxSize\", directionLinks: \"directionLinks\", autoHide: \"autoHide\", responsive: \"responsive\", previousLabel: \"previousLabel\", nextLabel: \"nextLabel\", screenReaderPaginationLabel: \"screenReaderPaginationLabel\", screenReaderPageLabel: \"screenReaderPageLabel\", screenReaderCurrentLabel: \"screenReaderCurrentLabel\" }, outputs: { pageChange: \"pageChange\", pageBoundsCorrection: \"pageBoundsCorrection\" }, ngImport: i0, template: \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\"\\n                         (pageBoundsCorrection)=\\\"pageBoundsCorrection.emit($event)\\\">\\n    <nav role=\\\"navigation\\\" [attr.aria-label]=\\\"screenReaderPaginationLabel\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\" aria-disabled=\\\"true\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages; trackBy: trackByIndex\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n              <span aria-live=\\\"polite\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \\n              </span>\\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\" aria-disabled=\\\"true\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </nav>\\n    </pagination-template>\\n    \", isInline: true, styles: [\".ngx-pagination{margin-left:0;margin-bottom:1rem}.ngx-pagination:before,.ngx-pagination:after{content:\\\" \\\";display:table}.ngx-pagination:after{clear:both}.ngx-pagination li{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;margin-right:.0625rem;border-radius:0}.ngx-pagination li{display:inline-block}.ngx-pagination a,.ngx-pagination button{color:#0a0a0a;display:block;padding:.1875rem .625rem;border-radius:0}.ngx-pagination a:hover,.ngx-pagination button:hover{background:#e6e6e6}.ngx-pagination .current{padding:.1875rem .625rem;background:#2199e8;color:#fefefe;cursor:default}.ngx-pagination .disabled{padding:.1875rem .625rem;color:#cacaca;cursor:default}.ngx-pagination .disabled:hover{background:transparent}.ngx-pagination a,.ngx-pagination button{cursor:pointer}.ngx-pagination .pagination-previous a:before,.ngx-pagination .pagination-previous.disabled:before{content:\\\"\\\\ab\\\";display:inline-block;margin-right:.5rem}.ngx-pagination .pagination-next a:after,.ngx-pagination .pagination-next.disabled:after{content:\\\"\\\\bb\\\";display:inline-block;margin-left:.5rem}.ngx-pagination .show-for-sr{position:absolute!important;width:1px;height:1px;overflow:hidden;clip:rect(0,0,0,0)}.ngx-pagination .small-screen{display:none}@media screen and (max-width: 601px){.ngx-pagination.responsive .small-screen{display:inline-block}.ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next){display:none}}\\n\"], directives: [{ type: PaginationControlsDirective, selector: \"pagination-template,[pagination-template]\", inputs: [\"id\", \"maxSize\"], outputs: [\"pageChange\", \"pageBoundsCorrection\"], exportAs: [\"paginationApi\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], pipes: { \"number\": i2.DecimalPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'pagination-controls',\r\n                    template: DEFAULT_TEMPLATE,\r\n                    styles: [DEFAULT_STYLES],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None\r\n                }]\r\n        }], propDecorators: { id: [{\r\n                type: Input\r\n            }], maxSize: [{\r\n                type: Input\r\n            }], directionLinks: [{\r\n                type: Input\r\n            }], autoHide: [{\r\n                type: Input\r\n            }], responsive: [{\r\n                type: Input\r\n            }], previousLabel: [{\r\n                type: Input\r\n            }], nextLabel: [{\r\n                type: Input\r\n            }], screenReaderPaginationLabel: [{\r\n                type: Input\r\n            }], screenReaderPageLabel: [{\r\n                type: Input\r\n            }], screenReaderCurrentLabel: [{\r\n                type: Input\r\n            }], pageChange: [{\r\n                type: Output\r\n            }], pageBoundsCorrection: [{\r\n                type: Output\r\n            }] } });\n\nclass NgxPaginationModule {\r\n}\r\nNgxPaginationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxPaginationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, declarations: [PaginatePipe,\r\n        PaginationControlsComponent,\r\n        PaginationControlsDirective], imports: [CommonModule], exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective] });\r\nNgxPaginationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, providers: [PaginationService], imports: [[CommonModule]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [CommonModule],\r\n                    declarations: [\r\n                        PaginatePipe,\r\n                        PaginationControlsComponent,\r\n                        PaginationControlsDirective\r\n                    ],\r\n                    providers: [PaginationService],\r\n                    exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-pagination\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPaginationModule, PaginatePipe, PaginationControlsComponent, PaginationControlsDirective, PaginationService };\n"],"mappings":"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BA,KADM,IAEtBV,KAAK,CAACW,GAAN,KAAcA,GAFlB;;IAGA,IAAI,CAACc,mBAAL,EAA0B;MACtB,OAAO,KAAP;IACH;;IACD,OAAOzB,KAAK,CAACM,KAAN,CAAYoB,KAAZ,CAAkB,CAACC,OAAD,EAAUC,KAAV,KAAoBD,OAAO,KAAKzB,UAAU,CAACQ,KAAK,GAAGkB,KAAT,CAA5D,CAAP;EACH;;AAvGc;;AAyGnB9B,YAAY,CAAC+B,IAAb;EAAA,iBAAyG/B,YAAzG,EAA+F7C,EAA/F,mBAAuIY,iBAAvI;AAAA;;AACAiC,YAAY,CAACgC,KAAb,kBAD+F7E,EAC/F;EAAA;EAAA,MAAuG6C,YAAvG;EAAA;AAAA;;AACA;EAAA,mDAF+F7C,EAE/F,mBAA2F6C,YAA3F,EAAqH,CAAC;IAC1GiC,IAAI,EAAE5E,IADoG;IAE1GgD,IAAI,EAAE,CAAC;MACC6B,IAAI,EAAE,UADP;MAECC,IAAI,EAAE;IAFP,CAAD;EAFoG,CAAD,CAArH,EAM4B,YAAY;IAAE,OAAO,CAAC;MAAEF,IAAI,EAAElE;IAAR,CAAD,CAAP;EAAuC,CANjF;AAAA;AAQA;AACA;AACA;AACA;;;AACA,MAAMqE,gBAAgB,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAnDA;AAoDA,MAAMC,cAAc,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module"}